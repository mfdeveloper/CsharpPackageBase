# .NET Desktop/.NET Standard libraries
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
      - master
      - refs/tags/*

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  feed: 'optiblast'
  dotnetCoreVersion: 3.1.x

stages:
  - stage: Build
    displayName: Build .dll's
    jobs:
      - job: Build
        displayName: DotNetCore build
        steps:
          - task: UseDotNet@2
            displayName: Use .NET Core sdk
            inputs:
              packageType: sdk
              version: '$(dotnetCoreVersion)'
              installationPath: '$(Agent.ToolsDirectory)/dotnet'
          - task: PaketRestore@0
            displayName: 'Install paket and dependencies'
          - task: UseDotNet@2
            displayName: Use .NET Core sdk
            inputs:
              packageType: sdk
              version: '$(dotnetCoreVersion)'
              installationPath: '$(Agent.ToolsDirectory)/dotnet'
          # Restore from an feed scoped feed in the same feed
          - task: NuGetCommand@2
            name: Restore
            displayName: Nuget Restore
            inputs:
              command: restore
              feedsToUse: config
              nugetConfigPath: nuget.config
              vstsFeed: '$(feed)'
              restoreSolution: '$(solution)'
          - task: DotNetCoreCLI@2
            displayName: Run tests
            inputs:
              command: test
              arguments: '--no-restore'
          - task: DotNetCoreCLI@2
            displayName: Build .sln solution
            inputs:
              command: build
              configuration: '$(buildConfiguration)'
              projects: '$(solution)'
              arguments: '--no-restore'
  - stage: GeneratePackage
    displayName: Create Nuget .nupkg package
    dependsOn: Build
    jobs:
      - job: Pack
        displayName: Package the component
        steps:
          # Create a ENV variable with latest Git tag
          - task: PowerShell@2
            displayName: Set last tag to environment variable
            inputs:
              targetType: 'inline'
              script: |
                $VERSION_TAG = git describe --tags (git rev-list --tags --max-count=1)
                Write-Host("##vso[task.setvariable variable=VERSION_TAG]$VERSION_TAG")
                Write-Host("##vso[build.addbuildtag]$VERSION_TAG")
                Write-Host($VERSION_TAG)
          # Package a project
          - task: NuGetCommand@2
            displayName: Generate the .nupkg
            inputs:
              command: pack
              versioningScheme: byEnvVar
              versionEnvVar: '$(VERSION_TAG)'
              configuration: '$(buildConfiguration)'
              packagesToPack: '$(libProject)/*.csproj'
              packDestination: '$(Build.ArtifactStagingDirectory)'
              includeSymbols: true
          # Publish the generated file like a pipeline artifact
          - task: PublishBuildArtifacts@1
            displayName: Publish .nupkg like a pipeline artifact
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(libProject).$(VERSION_TAG)'

  - stage: Publish
    displayName: Publish package to Azure Devops Artifacts feed
    condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')
    jobs:
    - job: AuthenticateAndPublish
      displayName: Publish to Azure Artifacts
      steps:
        # Restore from an feed scoped feed in the same feed
        - task: NuGetCommand@2
          name: Restore
          displayName: Nuget Restore
          inputs:
            command: restore
            feedsToUse: config
            nugetConfigPath: 'nuget.config'
            vstsFeed: '$(feed)'
            restoreSolution: '$(solution)'
        - task: NuGetAuthenticate@0
          name: Authenticate
          displayName: NuGet Authentication on private feed
        # PS: Azure Artifacts don't supports ".snupkg" symbols file
        - task: PublishSymbols@2
          displayName: Publish the symbols *.pdb to Azure Artifacts
          inputs:
            SearchPattern: '$(libProject)/bin/**/*.pdb'
            SymbolServerType: TeamServices
        - task: NuGetCommand@2
          name: PublishNupkg
          displayName: Publish the .nupkg
          inputs:
            command: push
            versioningScheme: byEnvVar
            versionEnvVar: '$(VERSION_TAG)'
            packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;$(Build.ArtifactStagingDirectory)/**/*.snupkg'
            feedsToUse: config
            nuGetFeedType: internal
            nugetConfigPath: '$(Build.WorkingDirectory)/nuget.config'
            publishVstsFeed: '$(feed)'
            allowPackageConflicts: true
            includeNuGetOrg: false
